// src/app/spinner.service.ts

import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class SpinnerService {
  private loading = new BehaviorSubject<boolean>(false);
  loadingStatus = this.loading.asObservable();

  show(): void {
    this.loading.next(true);
  }

  hide(): void {
    this.loading.next(false);
  }
}


// src/app/your-component/your-component.component.ts

import { Component } from '@angular/core';
import { DataService } from '../data.service';
import { SpinnerService } from '../spinner.service';

@Component({
  selector: 'app-your-component',
  templateUrl: './your-component.component.html',
  styleUrls: ['./your-component.component.css']
})
export class YourComponent {
  isLoading = false;

  constructor(private dataService: DataService, private spinnerService: SpinnerService) {}

  ngOnInit(): void {
    this.spinnerService.loadingStatus.subscribe((status: boolean) => {
      this.isLoading = status;
    });
  }

  startBatchJob(): void {
    this.spinnerService.show(); // Show the spinner
    this.dataService.startBatchJob().subscribe(
      () => {
        this.spinnerService.hide(); // Hide the spinner on success
      },
      () => {
        this.spinnerService.hide(); // Hide the spinner on error
      }
    );
  }
}
<company-spinner *ngIf="isLoading"></company-spinner> <!-- Use your company-specific spinner -->




/* src/app/table/table.component.css */

.table-container {
  margin: 0 auto; /* Center the table container */
  width: 80%; /* Adjust width to fit within viewport with margins */
  overflow-x: auto; /* Ensure responsiveness for smaller screens */
  padding: 20px; /* Add padding for some margin around the table */
  box-sizing: border-box; /* Ensure padding is included in the width */
}

table {
  width: 100%; /* Make the table take up the full width of its container */
  border-collapse: collapse; /* Ensure borders are collapsed */
}

th, td {
  padding: 8px; /* Add some padding inside table cells */
  text-align: left; /* Align text to the left */
  border-bottom: 1px solid #ddd; /* Add a bottom border to rows */
}

th {
  background-color: #f2f2f2; /* Add a background color to header */
}

.status {
  font-weight: bold;
}

.status-success {
  color: green;
}

.status-failure {
  color: red;
}

/* Ensure table does not increase page size horizontally */
body {
  overflow-x: hidden;
}


// src/app/data.service.ts

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

export interface TableEntry {
  id: number;
  name: string;
  value: string;
}

@Injectable({
  providedIn: 'root'
})
export class DataService {

  private apiUrl = 'http://localhost:8080/api/table-entries'; // Replace with your Spring backend endpoint

  constructor(private http: HttpClient) { }

  getTableEntries(): Observable<TableEntry[]> {
    return this.http.get<TableEntry[]>(this.apiUrl);
  }
}


// src/app/table/table.component.ts

import { Component, OnInit } from '@angular/core';
import { DataService, TableEntry } from '../data.service';

@Component({
  selector: 'app-table',
  templateUrl: './table.component.html',
  styleUrls: ['./table.component.css']
})
export class TableComponent implements OnInit {
  
  tableEntries: TableEntry[] = [];

  constructor(private dataService: DataService) { }

  ngOnInit(): void {
    this.dataService.getTableEntries().subscribe(entries => {
      this.tableEntries = entries;
    });
  }
}



<!-- src/app/table/table.component.html -->

<div class="table-container">
  <table>
    <thead>
      <tr>
        <th>ID</th>
        <th>Name</th>
        <th>Value</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let entry of tableEntries">
        <td>{{ entry.id }}</td>
        <td>{{ entry.name }}</td>
        <td>{{ entry.value }}</td>
      </tr>
    </tbody>
  </table>
</div>
